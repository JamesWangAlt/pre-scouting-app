/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
    "/status": {
        /** @description Returns API status, and TBA status information. */
        get: operations["getStatus"];
    };
    "/teams/{page_num}": {
        /** @description Gets a list of `Team` objects, paginated in groups of 500. */
        get: operations["getTeams"];
    };
    "/teams/{page_num}/simple": {
        /** @description Gets a list of short form `Team_Simple` objects, paginated in groups of 500. */
        get: operations["getTeamsSimple"];
    };
    "/teams/{page_num}/keys": {
        /** @description Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.) */
        get: operations["getTeamsKeys"];
    };
    "/teams/{year}/{page_num}": {
        /** @description Gets a list of `Team` objects that competed in the given year, paginated in groups of 500. */
        get: operations["getTeamsByYear"];
    };
    "/teams/{year}/{page_num}/simple": {
        /** @description Gets a list of short form `Team_Simple` objects that competed in the given year, paginated in groups of 500. */
        get: operations["getTeamsByYearSimple"];
    };
    "/teams/{year}/{page_num}/keys": {
        /** @description Gets a list Team Keys that competed in the given year, paginated in groups of 500. */
        get: operations["getTeamsByYearKeys"];
    };
    "/team/{team_key}": {
        /** @description Gets a `Team` object for the team referenced by the given key. */
        get: operations["getTeam"];
    };
    "/team/{team_key}/simple": {
        /** @description Gets a `Team_Simple` object for the team referenced by the given key. */
        get: operations["getTeamSimple"];
    };
    "/team/{team_key}/years_participated": {
        /** @description Gets a list of years in which the team participated in at least one competition. */
        get: operations["getTeamYearsParticipated"];
    };
    "/team/{team_key}/districts": {
        /** @description Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district. */
        get: operations["getTeamDistricts"];
    };
    "/team/{team_key}/robots": {
        /** @description Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot. */
        get: operations["getTeamRobots"];
    };
    "/team/{team_key}/events": {
        /** @description Gets a list of all events this team has competed at. */
        get: operations["getTeamEvents"];
    };
    "/team/{team_key}/events/simple": {
        /** @description Gets a short-form list of all events this team has competed at. */
        get: operations["getTeamEventsSimple"];
    };
    "/team/{team_key}/events/keys": {
        /** @description Gets a list of the event keys for all events this team has competed at. */
        get: operations["getTeamEventsKeys"];
    };
    "/team/{team_key}/events/{year}": {
        /** @description Gets a list of events this team has competed at in the given year. */
        get: operations["getTeamEventsByYear"];
    };
    "/team/{team_key}/events/{year}/simple": {
        /** @description Gets a short-form list of events this team has competed at in the given year. */
        get: operations["getTeamEventsByYearSimple"];
    };
    "/team/{team_key}/events/{year}/keys": {
        /** @description Gets a list of the event keys for events this team has competed at in the given year. */
        get: operations["getTeamEventsByYearKeys"];
    };
    "/team/{team_key}/events/{year}/statuses": {
        /** @description Gets a key-value list of the event statuses for events this team has competed at in the given year. */
        get: operations["getTeamEventsStatusesByYear"];
    };
    "/team/{team_key}/event/{event_key}/matches": {
        /** @description Gets a list of matches for the given team and event. */
        get: operations["getTeamEventMatches"];
    };
    "/team/{team_key}/event/{event_key}/matches/simple": {
        /** @description Gets a short-form list of matches for the given team and event. */
        get: operations["getTeamEventMatchesSimple"];
    };
    "/team/{team_key}/event/{event_key}/matches/keys": {
        /** @description Gets a list of match keys for matches for the given team and event. */
        get: operations["getTeamEventMatchesKeys"];
    };
    "/team/{team_key}/event/{event_key}/awards": {
        /** @description Gets a list of awards the given team won at the given event. */
        get: operations["getTeamEventAwards"];
    };
    "/team/{team_key}/event/{event_key}/status": {
        /** @description Gets the competition rank and status of the team at the given event. */
        get: operations["getTeamEventStatus"];
    };
    "/team/{team_key}/awards": {
        /** @description Gets a list of awards the given team has won. */
        get: operations["getTeamAwards"];
    };
    "/team/{team_key}/awards/{year}": {
        /** @description Gets a list of awards the given team has won in a given year. */
        get: operations["getTeamAwardsByYear"];
    };
    "/team/{team_key}/matches/{year}": {
        /** @description Gets a list of matches for the given team and year. */
        get: operations["getTeamMatchesByYear"];
    };
    "/team/{team_key}/matches/{year}/simple": {
        /** @description Gets a short-form list of matches for the given team and year. */
        get: operations["getTeamMatchesByYearSimple"];
    };
    "/team/{team_key}/matches/{year}/keys": {
        /** @description Gets a list of match keys for matches for the given team and year. */
        get: operations["getTeamMatchesByYearKeys"];
    };
    "/team/{team_key}/media/{year}": {
        /** @description Gets a list of Media (videos / pictures) for the given team and year. */
        get: operations["getTeamMediaByYear"];
    };
    "/team/{team_key}/media/tag/{media_tag}": {
        /** @description Gets a list of Media (videos / pictures) for the given team and tag. */
        get: operations["getTeamMediaByTag"];
    };
    "/team/{team_key}/media/tag/{media_tag}/{year}": {
        /** @description Gets a list of Media (videos / pictures) for the given team, tag and year. */
        get: operations["getTeamMediaByTagYear"];
    };
    "/team/{team_key}/social_media": {
        /** @description Gets a list of Media (social media) for the given team. */
        get: operations["getTeamSocialMedia"];
    };
    "/events/{year}": {
        /** @description Gets a list of events in the given year. */
        get: operations["getEventsByYear"];
    };
    "/events/{year}/simple": {
        /** @description Gets a short-form list of events in the given year. */
        get: operations["getEventsByYearSimple"];
    };
    "/events/{year}/keys": {
        /** @description Gets a list of event keys in the given year. */
        get: operations["getEventsByYearKeys"];
    };
    "/event/{event_key}": {
        /** @description Gets an Event. */
        get: operations["getEvent"];
    };
    "/event/{event_key}/simple": {
        /** @description Gets a short-form Event. */
        get: operations["getEventSimple"];
    };
    "/event/{event_key}/alliances": {
        /** @description Gets a list of Elimination Alliances for the given Event. */
        get: operations["getEventAlliances"];
    };
    "/event/{event_key}/insights": {
        /** @description Gets a set of Event-specific insights for the given Event. */
        get: operations["getEventInsights"];
    };
    "/event/{event_key}/oprs": {
        /** @description Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event. */
        get: operations["getEventOPRs"];
    };
    "/event/{event_key}/predictions": {
        /** @description Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time. */
        get: operations["getEventPredictions"];
    };
    "/event/{event_key}/rankings": {
        /** @description Gets a list of team rankings for the Event. */
        get: operations["getEventRankings"];
    };
    "/event/{event_key}/district_points": {
        /** @description Gets a list of team rankings for the Event. */
        get: operations["getEventDistrictPoints"];
    };
    "/event/{event_key}/teams": {
        /** @description Gets a list of `Team` objects that competed in the given event. */
        get: operations["getEventTeams"];
    };
    "/event/{event_key}/teams/simple": {
        /** @description Gets a short-form list of `Team` objects that competed in the given event. */
        get: operations["getEventTeamsSimple"];
    };
    "/event/{event_key}/teams/keys": {
        /** @description Gets a list of `Team` keys that competed in the given event. */
        get: operations["getEventTeamsKeys"];
    };
    "/event/{event_key}/teams/statuses": {
        /** @description Gets a key-value list of the event statuses for teams competing at the given event. */
        get: operations["getEventTeamsStatuses"];
    };
    "/event/{event_key}/matches": {
        /** @description Gets a list of matches for the given event. */
        get: operations["getEventMatches"];
    };
    "/event/{event_key}/matches/simple": {
        /** @description Gets a short-form list of matches for the given event. */
        get: operations["getEventMatchesSimple"];
    };
    "/event/{event_key}/matches/keys": {
        /** @description Gets a list of match keys for the given event. */
        get: operations["getEventMatchesKeys"];
    };
    "/event/{event_key}/matches/timeseries": {
        /**
         * @description Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data.
         * *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
         * *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
         */
        get: operations["getEventMatchTimeseries"];
    };
    "/event/{event_key}/awards": {
        /** @description Gets a list of awards from the given event. */
        get: operations["getEventAwards"];
    };
    "/match/{match_key}": {
        /** @description Gets a `Match` object for the given match key. */
        get: operations["getMatch"];
    };
    "/match/{match_key}/simple": {
        /** @description Gets a short-form `Match` object for the given match key. */
        get: operations["getMatchSimple"];
    };
    "/match/{match_key}/timeseries": {
        /**
         * @description Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available.
         * *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
         * *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
         */
        get: operations["getMatchTimeseries"];
    };
    "/match/{match_key}/zebra_motionworks": {
        /** @description Gets Zebra MotionWorks data for a Match for the given match key. */
        get: operations["getMatchZebra"];
    };
    "/districts/{year}": {
        /** @description Gets a list of districts and their corresponding district key, for the given year. */
        get: operations["getDistrictsByYear"];
    };
    "/district/{district_key}/events": {
        /** @description Gets a list of events in the given district. */
        get: operations["getDistrictEvents"];
    };
    "/district/{district_key}/events/simple": {
        /** @description Gets a short-form list of events in the given district. */
        get: operations["getDistrictEventsSimple"];
    };
    "/district/{district_key}/events/keys": {
        /** @description Gets a list of event keys for events in the given district. */
        get: operations["getDistrictEventsKeys"];
    };
    "/district/{district_key}/teams": {
        /** @description Gets a list of `Team` objects that competed in events in the given district. */
        get: operations["getDistrictTeams"];
    };
    "/district/{district_key}/teams/simple": {
        /** @description Gets a short-form list of `Team` objects that competed in events in the given district. */
        get: operations["getDistrictTeamsSimple"];
    };
    "/district/{district_key}/teams/keys": {
        /** @description Gets a list of `Team` objects that competed in events in the given district. */
        get: operations["getDistrictTeamsKeys"];
    };
    "/district/{district_key}/rankings": {
        /** @description Gets a list of team district rankings for the given district. */
        get: operations["getDistrictRankings"];
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        API_Status: {
            /** @description Year of the current FRC season. */
            current_season: number;
            /** @description Maximum FRC season year for valid queries. */
            max_season: number;
            /** @description True if the entire FMS API provided by FIRST is down. */
            is_datafeed_down: boolean;
            /** @description An array of strings containing event keys of any active events that are no longer updating. */
            down_events: string[];
            ios: components["schemas"]["API_Status_App_Version"];
            android: components["schemas"]["API_Status_App_Version"];
        };
        API_Status_App_Version: {
            /** @description Internal use - Minimum application version required to correctly connect and process data. */
            min_app_version: number;
            /** @description Internal use - Latest application version available. */
            latest_app_version: number;
        };
        Team_Simple: {
            /** @description TBA team key with the format `frcXXXX` with `XXXX` representing the team number. */
            key: string;
            /** @description Official team number issued by FIRST. */
            team_number: number;
            /** @description Team nickname provided by FIRST. */
            nickname?: string;
            /** @description Official long name registered with FIRST. */
            name: string;
            /** @description City of team derived from parsing the address registered with FIRST. */
            city?: string;
            /** @description State of team derived from parsing the address registered with FIRST. */
            state_prov?: string;
            /** @description Country of team derived from parsing the address registered with FIRST. */
            country?: string;
        };
        Team: {
            /** @description TBA team key with the format `frcXXXX` with `XXXX` representing the team number. */
            key: string;
            /** @description Official team number issued by FIRST. */
            team_number: number;
            /** @description Team nickname provided by FIRST. */
            nickname?: string;
            /** @description Official long name registered with FIRST. */
            name: string;
            /** @description Name of team school or affilited group registered with FIRST. */
            school_name?: string;
            /** @description City of team derived from parsing the address registered with FIRST. */
            city?: string;
            /** @description State of team derived from parsing the address registered with FIRST. */
            state_prov?: string;
            /** @description Country of team derived from parsing the address registered with FIRST. */
            country?: string;
            /** @description Will be NULL, for future development. */
            address?: string;
            /** @description Postal code from the team address. */
            postal_code?: string;
            /** @description Will be NULL, for future development. */
            gmaps_place_id?: string;
            /**
             * Format: url
             * @description Will be NULL, for future development.
             */
            gmaps_url?: string;
            /**
             * Format: double
             * @description Will be NULL, for future development.
             */
            lat?: number;
            /**
             * Format: double
             * @description Will be NULL, for future development.
             */
            lng?: number;
            /** @description Will be NULL, for future development. */
            location_name?: string;
            /**
             * Format: url
             * @description Official website associated with the team.
             */
            website?: string;
            /** @description First year the team officially competed. */
            rookie_year?: number;
            /** @description Team's motto as provided by FIRST. This field is deprecated and will return null - will be removed at end-of-season in 2019. */
            motto?: string;
            /** @description Location of the team's home championship each year as a key-value pair. The year (as a string) is the key, and the city is the value. */
            home_championship?: Record<string, never>;
        };
        Team_Robot: {
            /** @description Year this robot competed in. */
            year: number;
            /** @description Name of the robot as provided by the team. */
            robot_name: string;
            /** @description Internal TBA identifier for this robot. */
            key: string;
            /** @description TBA team key for this robot. */
            team_key: string;
        };
        Event_Simple: {
            /** @description TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event. */
            key: string;
            /** @description Official name of event on record either provided by FIRST or organizers of offseason event. */
            name: string;
            /** @description Event short code, as provided by FIRST. */
            event_code: string;
            /** @description Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2 */
            event_type: number;
            district?: components["schemas"]["District_List"];
            /** @description City, town, village, etc. the event is located in. */
            city?: string;
            /** @description State or Province the event is located in. */
            state_prov?: string;
            /** @description Country the event is located in. */
            country?: string;
            /**
             * Format: date
             * @description Event start date in `yyyy-mm-dd` format.
             */
            start_date: string;
            /**
             * Format: date
             * @description Event end date in `yyyy-mm-dd` format.
             */
            end_date: string;
            /** @description Year the event data is for. */
            year: number;
        };
        Event: {
            /** @description TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event. */
            key: string;
            /** @description Official name of event on record either provided by FIRST or organizers of offseason event. */
            name: string;
            /** @description Event short code, as provided by FIRST. */
            event_code: string;
            /** @description Event Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/event_type.py#L2 */
            event_type: number;
            district?: components["schemas"]["District_List"];
            /** @description City, town, village, etc. the event is located in. */
            city?: string;
            /** @description State or Province the event is located in. */
            state_prov?: string;
            /** @description Country the event is located in. */
            country?: string;
            /**
             * Format: date
             * @description Event start date in `yyyy-mm-dd` format.
             */
            start_date: string;
            /**
             * Format: date
             * @description Event end date in `yyyy-mm-dd` format.
             */
            end_date: string;
            /** @description Year the event data is for. */
            year: number;
            /** @description Same as `name` but doesn't include event specifiers, such as 'Regional' or 'District'. May be null. */
            short_name?: string;
            /** @description Event Type, eg Regional, District, or Offseason. */
            event_type_string: string;
            /** @description Week of the event relative to the first official season event, zero-indexed. Only valid for Regionals, Districts, and District Championships. Null otherwise. (Eg. A season with a week 0 'preseason' event does not count, and week 1 events will show 0 here. Seasons with a week 0.5 regional event will show week 0 for those event(s) and week 1 for week 1 events and so on.) */
            week?: number;
            /** @description Address of the event's venue, if available. */
            address?: string;
            /** @description Postal code from the event address. */
            postal_code?: string;
            /** @description Google Maps Place ID for the event address. */
            gmaps_place_id?: string;
            /**
             * Format: url
             * @description Link to address location on Google Maps.
             */
            gmaps_url?: string;
            /**
             * Format: double
             * @description Latitude for the event address.
             */
            lat?: number;
            /**
             * Format: double
             * @description Longitude for the event address.
             */
            lng?: number;
            /** @description Name of the location at the address for the event, eg. Blue Alliance High School. */
            location_name?: string;
            /** @description Timezone name. */
            timezone?: string;
            /** @description The event's website, if any. */
            website?: string;
            /** @description The FIRST internal Event ID, used to link to the event on the FRC webpage. */
            first_event_id?: string;
            /** @description Public facing event code used by FIRST (on frc-events.firstinspires.org, for example) */
            first_event_code?: string;
            webcasts?: components["schemas"]["Webcast"][];
            /** @description An array of event keys for the divisions at this event. */
            division_keys?: string[];
            /** @description The TBA Event key that represents the event's parent. Used to link back to the event from a division event. It is also the inverse relation of `divison_keys`. */
            parent_event_key?: string;
            /** @description Playoff Type, as defined here: https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/playoff_type.py#L4, or null. */
            playoff_type?: number;
            /** @description String representation of the `playoff_type`, or null. */
            playoff_type_string?: string;
        };
        Team_Event_Status: {
            qual?: components["schemas"]["Team_Event_Status_rank"];
            alliance?: components["schemas"]["Team_Event_Status_alliance"];
            playoff?: components["schemas"]["Team_Event_Status_playoff"];
            /** @description An HTML formatted string suitable for display to the user containing the team's alliance pick status. */
            alliance_status_str?: string;
            /** @description An HTML formatter string suitable for display to the user containing the team's playoff status. */
            playoff_status_str?: string;
            /** @description An HTML formatted string suitable for display to the user containing the team's overall status summary of the event. */
            overall_status_str?: string;
            /** @description TBA match key for the next match the team is scheduled to play in at this event, or null. */
            next_match_key?: string;
            /** @description TBA match key for the last match the team played in at this event, or null. */
            last_match_key?: string;
        };
        Team_Event_Status_rank: {
            /** @description Number of teams ranked. */
            num_teams?: number;
            ranking?: {
                /** @description Number of matches played. */
                matches_played?: number;
                /**
                 * Format: double
                 * @description For some years, average qualification score. Can be null.
                 */
                qual_average?: number;
                /** @description Ordered list of values used to determine the rank. See the `sort_order_info` property for the name of each value. */
                sort_orders?: number[];
                record?: components["schemas"]["WLT_Record"];
                /** @description Relative rank of this team. */
                rank?: number;
                /** @description Number of matches the team was disqualified for. */
                dq?: number;
                /** @description TBA team key for this rank. */
                team_key?: string;
            };
            /** @description Ordered list of names corresponding to the elements of the `sort_orders` array. */
            sort_order_info?: {
                /** @description The number of digits of precision used for this value, eg `2` would correspond to a value of `101.11` while `0` would correspond to `101`. */
                precision?: number;
                /** @description The descriptive name of the value used to sort the ranking. */
                name?: string;
            }[];
            status?: string;
        };
        Team_Event_Status_alliance: {
            /** @description Alliance name, may be null. */
            name?: string;
            /** @description Alliance number. */
            number: number;
            backup?: components["schemas"]["Team_Event_Status_alliance_backup"];
            /** @description Order the team was picked in the alliance from 0-2, with 0 being alliance captain. */
            pick: number;
        };
        /** @description Backup status, may be null. */
        Team_Event_Status_alliance_backup: {
            /** @description TBA key for the team replaced by the backup. */
            out?: string;
            /** @description TBA key for the backup team called in. */
            in?: string;
        };
        /** @description Playoff status for this team, may be null if the team did not make playoffs, or playoffs have not begun. */
        Team_Event_Status_playoff: {
            /**
             * @description The highest playoff level the team reached.
             * @enum {string}
             */
            level?: "qm" | "ef" | "qf" | "sf" | "f";
            current_level_record?: components["schemas"]["WLT_Record"];
            record?: components["schemas"]["WLT_Record"];
            /**
             * @description Current competition status for the playoffs.
             * @enum {string}
             */
            status?: "won" | "eliminated" | "playing";
            /** @description The average match score during playoffs. Year specific. May be null if not relevant for a given year. */
            playoff_average?: number;
            double_elim_round?: string;
        };
        Event_Ranking: {
            /** @description List of rankings at the event. */
            rankings: {
                /** @description Number of matches played by this team. */
                matches_played: number;
                /** @description The average match score during qualifications. Year specific. May be null if not relevant for a given year. */
                qual_average?: number;
                /** @description Additional special data on the team's performance calculated by TBA. */
                extra_stats?: number[];
                /** @description Additional year-specific information, may be null. See parent `sort_order_info` for details. */
                sort_orders?: number[];
                record: components["schemas"]["WLT_Record"];
                /** @description The team's rank at the event as provided by FIRST. */
                rank: number;
                /** @description Number of times disqualified. */
                dq: number;
                /** @description The team with this rank. */
                team_key: string;
            }[];
            /** @description List of special TBA-generated values provided in the `extra_stats` array for each item. */
            extra_stats_info?: {
                /** @description Integer expressing the number of digits of precision in the number provided in `sort_orders`. */
                precision: number;
                /** @description Name of the field used in the `extra_stats` array. */
                name: string;
            }[];
            /** @description List of year-specific values provided in the `sort_orders` array for each team. */
            sort_order_info: {
                /** @description Integer expressing the number of digits of precision in the number provided in `sort_orders`. */
                precision: number;
                /** @description Name of the field used in the `sort_order` array. */
                name: string;
            }[];
        };
        Event_District_Points: {
            /** @description Points gained for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the points as its value. */
            points: {
                [key: string]: {
                    /** @description Total points awarded at this event. */
                    total: number;
                    /** @description Points awarded for alliance selection */
                    alliance_points: number;
                    /** @description Points awarded for elimination match performance. */
                    elim_points: number;
                    /** @description Points awarded for event awards. */
                    award_points: number;
                    /** @description Points awarded for qualification match performance. */
                    qual_points: number;
                };
            };
            /** @description Tiebreaker values for each team at the event. Stored as a key-value pair with the team key as the key, and an object describing the tiebreaker elements as its value. */
            tiebreakers?: {
                [key: string]: {
                    highest_qual_scores?: number[];
                    qual_wins?: number;
                };
            };
        };
        /** @description A year-specific event insight object expressed as a JSON string, separated in to `qual` and `playoff` fields. See also Event_Insights_2016, Event_Insights_2017, etc. */
        Event_Insights: {
            /** @description Inights for the qualification round of an event */
            qual?: Record<string, never>;
            /** @description Insights for the playoff round of an event */
            playoff?: Record<string, never>;
        };
        /** @description Insights for FIRST Stronghold qualification and elimination matches. */
        Event_Insights_2016: {
            /** @description For the Low Bar - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
            LowBar: number[];
            /** @description For the Cheval De Frise - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
            A_ChevalDeFrise: number[];
            /** @description For the Portcullis - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
            A_Portcullis: number[];
            /** @description For the Ramparts - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
            B_Ramparts: number[];
            /** @description For the Moat - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
            B_Moat: number[];
            /** @description For the Sally Port - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
            C_SallyPort: number[];
            /** @description For the Drawbridge - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
            C_Drawbridge: number[];
            /** @description For the Rough Terrain - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
            D_RoughTerrain: number[];
            /** @description For the Rock Wall - An array with three values, number of times damaged, number of opportunities to damage, and percentage. */
            D_RockWall: number[];
            /**
             * Format: float
             * @description Average number of high goals scored.
             */
            average_high_goals: number;
            /**
             * Format: float
             * @description Average number of low goals scored.
             */
            average_low_goals: number;
            /** @description An array with three values, number of times breached, number of opportunities to breach, and percentage. */
            breaches: number[];
            /** @description An array with three values, number of times scaled, number of opportunities to scale, and percentage. */
            scales: number[];
            /** @description An array with three values, number of times challenged, number of opportunities to challenge, and percentage. */
            challenges: number[];
            /** @description An array with three values, number of times captured, number of opportunities to capture, and percentage. */
            captures: number[];
            /**
             * Format: float
             * @description Average winning score.
             */
            average_win_score: number;
            /**
             * Format: float
             * @description Average margin of victory.
             */
            average_win_margin: number;
            /**
             * Format: float
             * @description Average total score.
             */
            average_score: number;
            /**
             * Format: float
             * @description Average autonomous score.
             */
            average_auto_score: number;
            /**
             * Format: float
             * @description Average crossing score.
             */
            average_crossing_score: number;
            /**
             * Format: float
             * @description Average boulder score.
             */
            average_boulder_score: number;
            /**
             * Format: float
             * @description Average tower score.
             */
            average_tower_score: number;
            /**
             * Format: float
             * @description Average foul score.
             */
            average_foul_score: number;
            /** @description An array with three values, high score, match key from the match with the high score, and the name of the match. */
            high_score: string[];
        };
        /** @description Insights for FIRST STEAMWORKS qualification and elimination matches. */
        Event_Insights_2017: {
            /**
             * Format: float
             * @description Average foul score.
             */
            average_foul_score: number;
            /**
             * Format: float
             * @description Average fuel points scored.
             */
            average_fuel_points: number;
            /**
             * Format: float
             * @description Average fuel points scored during auto.
             */
            average_fuel_points_auto: number;
            /**
             * Format: float
             * @description Average fuel points scored during teleop.
             */
            average_fuel_points_teleop: number;
            /**
             * Format: float
             * @description Average points scored in the high goal.
             */
            average_high_goals: number;
            /**
             * Format: float
             * @description Average points scored in the high goal during auto.
             */
            average_high_goals_auto: number;
            /**
             * Format: float
             * @description Average points scored in the high goal during teleop.
             */
            average_high_goals_teleop: number;
            /**
             * Format: float
             * @description Average points scored in the low goal.
             */
            average_low_goals: number;
            /**
             * Format: float
             * @description Average points scored in the low goal during auto.
             */
            average_low_goals_auto: number;
            /**
             * Format: float
             * @description Average points scored in the low goal during teleop.
             */
            average_low_goals_teleop: number;
            /**
             * Format: float
             * @description Average mobility points scored during auto.
             */
            average_mobility_points_auto: number;
            /**
             * Format: float
             * @description Average points scored during auto.
             */
            average_points_auto: number;
            /**
             * Format: float
             * @description Average points scored during teleop.
             */
            average_points_teleop: number;
            /**
             * Format: float
             * @description Average rotor points scored.
             */
            average_rotor_points: number;
            /**
             * Format: float
             * @description Average rotor points scored during auto.
             */
            average_rotor_points_auto: number;
            /**
             * Format: float
             * @description Average rotor points scored during teleop.
             */
            average_rotor_points_teleop: number;
            /**
             * Format: float
             * @description Average score.
             */
            average_score: number;
            /**
             * Format: float
             * @description Average takeoff points scored during teleop.
             */
            average_takeoff_points_teleop: number;
            /**
             * Format: float
             * @description Average margin of victory.
             */
            average_win_margin: number;
            /**
             * Format: float
             * @description Average winning score.
             */
            average_win_score: number;
            /** @description An array with three values, kPa scored, match key from the match with the high kPa, and the name of the match */
            high_kpa: string[];
            /** @description An array with three values, high score, match key from the match with the high score, and the name of the match */
            high_score: string[];
            /** @description An array with three values, number of times kPa bonus achieved, number of opportunities to bonus, and percentage. */
            kpa_achieved: number[];
            /** @description An array with three values, number of times mobility bonus achieved, number of opportunities to bonus, and percentage. */
            mobility_counts: number[];
            /** @description An array with three values, number of times rotor 1 engaged, number of opportunities to engage, and percentage. */
            rotor_1_engaged: number[];
            /** @description An array with three values, number of times rotor 1 engaged in auto, number of opportunities to engage in auto, and percentage. */
            rotor_1_engaged_auto: number[];
            /** @description An array with three values, number of times rotor 2 engaged, number of opportunities to engage, and percentage. */
            rotor_2_engaged: number[];
            /** @description An array with three values, number of times rotor 2 engaged in auto, number of opportunities to engage in auto, and percentage. */
            rotor_2_engaged_auto: number[];
            /** @description An array with three values, number of times rotor 3 engaged, number of opportunities to engage, and percentage. */
            rotor_3_engaged: number[];
            /** @description An array with three values, number of times rotor 4 engaged, number of opportunities to engage, and percentage. */
            rotor_4_engaged: number[];
            /** @description An array with three values, number of times takeoff was counted, number of opportunities to takeoff, and percentage. */
            takeoff_counts: number[];
            /** @description An array with three values, number of times a unicorn match (Win + kPa & Rotor Bonuses) occured, number of opportunities to have a unicorn match, and percentage. */
            unicorn_matches: number[];
        };
        /** @description Insights for FIRST Power Up qualification and elimination matches. */
        Event_Insights_2018: {
            /** @description An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage. */
            auto_quest_achieved: number[];
            /**
             * Format: float
             * @description Average number of boost power up scored (out of 3).
             */
            average_boost_played: number;
            /**
             * Format: float
             * @description Average endgame points.
             */
            average_endgame_points: number;
            /**
             * Format: float
             * @description Average number of force power up scored (out of 3).
             */
            average_force_played: number;
            /**
             * Format: float
             * @description Average foul score.
             */
            average_foul_score: number;
            /**
             * Format: float
             * @description Average points scored during auto.
             */
            average_points_auto: number;
            /**
             * Format: float
             * @description Average points scored during teleop.
             */
            average_points_teleop: number;
            /**
             * Format: float
             * @description Average mobility points scored during auto.
             */
            average_run_points_auto: number;
            /**
             * Format: float
             * @description Average scale ownership points scored.
             */
            average_scale_ownership_points: number;
            /**
             * Format: float
             * @description Average scale ownership points scored during auto.
             */
            average_scale_ownership_points_auto: number;
            /**
             * Format: float
             * @description Average scale ownership points scored during teleop.
             */
            average_scale_ownership_points_teleop: number;
            /**
             * Format: float
             * @description Average score.
             */
            average_score: number;
            /**
             * Format: float
             * @description Average switch ownership points scored.
             */
            average_switch_ownership_points: number;
            /**
             * Format: float
             * @description Average switch ownership points scored during auto.
             */
            average_switch_ownership_points_auto: number;
            /**
             * Format: float
             * @description Average switch ownership points scored during teleop.
             */
            average_switch_ownership_points_teleop: number;
            /**
             * Format: float
             * @description Average value points scored.
             */
            average_vault_points: number;
            /**
             * Format: float
             * @description Average margin of victory.
             */
            average_win_margin: number;
            /**
             * Format: float
             * @description Average winning score.
             */
            average_win_score: number;
            /** @description An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage. */
            boost_played_counts: number[];
            /** @description An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage. */
            climb_counts: number[];
            /** @description An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage. */
            face_the_boss_achieved: number[];
            /** @description An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage. */
            force_played_counts: number[];
            /** @description An array with three values, high score, match key from the match with the high score, and the name of the match */
            high_score: string[];
            /** @description An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage. */
            levitate_played_counts: number[];
            /** @description An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage. */
            run_counts_auto: number[];
            /**
             * Format: float
             * @description Average scale neutral percentage.
             */
            scale_neutral_percentage: number;
            /**
             * Format: float
             * @description Average scale neutral percentage during auto.
             */
            scale_neutral_percentage_auto: number;
            /**
             * Format: float
             * @description Average scale neutral percentage during teleop.
             */
            scale_neutral_percentage_teleop: number;
            /** @description An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage. */
            switch_owned_counts_auto: number[];
            /** @description An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage. */
            unicorn_matches: number[];
            /**
             * Format: float
             * @description Average opposing switch denail percentage for the winning alliance during teleop.
             */
            winning_opp_switch_denial_percentage_teleop: number;
            /**
             * Format: float
             * @description Average own switch ownership percentage for the winning alliance.
             */
            winning_own_switch_ownership_percentage: number;
            /**
             * Format: float
             * @description Average own switch ownership percentage for the winning alliance during auto.
             */
            winning_own_switch_ownership_percentage_auto: number;
            /**
             * Format: float
             * @description Average own switch ownership percentage for the winning alliance during teleop.
             */
            winning_own_switch_ownership_percentage_teleop: number;
            /**
             * Format: float
             * @description Average scale ownership percentage for the winning alliance.
             */
            winning_scale_ownership_percentage: number;
            /**
             * Format: float
             * @description Average scale ownership percentage for the winning alliance during auto.
             */
            winning_scale_ownership_percentage_auto: number;
            /**
             * Format: float
             * @description Average scale ownership percentage for the winning alliance during teleop.
             */
            winning_scale_ownership_percentage_teleop: number;
        };
        /** @description OPR, DPR, and CCWM for teams at the event. */
        Event_OPRs: {
            /** @description A key-value pair with team key (eg `frc254`) as key and OPR as value. */
            oprs?: {
                [key: string]: number;
            };
            /** @description A key-value pair with team key (eg `frc254`) as key and DPR as value. */
            dprs?: {
                [key: string]: number;
            };
            /** @description A key-value pair with team key (eg `frc254`) as key and CCWM as value. */
            ccwms?: {
                [key: string]: number;
            };
        };
        /** @description JSON Object containing prediction information for the event. Contains year-specific information and is subject to change. */
        Event_Predictions: Record<string, never>;
        Match_Simple: {
            /** @description TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may append the competition level if more than one match in required per set. */
            key: string;
            /**
             * @description The competition level the match was played at.
             * @enum {string}
             */
            comp_level: "qm" | "ef" | "qf" | "sf" | "f";
            /** @description The set number in a series of matches where more than one match is required in the match series. */
            set_number: number;
            /** @description The match number of the match in the competition level. */
            match_number: number;
            /** @description A list of alliances, the teams on the alliances, and their score. */
            alliances?: {
                red?: components["schemas"]["Match_alliance"];
                blue?: components["schemas"]["Match_alliance"];
            };
            /**
             * @description The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
             * @enum {string}
             */
            winning_alliance?: "red" | "blue" | "";
            /** @description Event key of the event the match was played at. */
            event_key: string;
            /**
             * Format: int64
             * @description UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.
             */
            time?: number;
            /**
             * Format: int64
             * @description UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.
             */
            predicted_time?: number;
            /**
             * Format: int64
             * @description UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.
             */
            actual_time?: number;
        };
        Match: {
            /** @description TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set. */
            key: string;
            /**
             * @description The competition level the match was played at.
             * @enum {string}
             */
            comp_level: "qm" | "ef" | "qf" | "sf" | "f";
            /** @description The set number in a series of matches where more than one match is required in the match series. */
            set_number: number;
            /** @description The match number of the match in the competition level. */
            match_number: number;
            /** @description A list of alliances, the teams on the alliances, and their score. */
            alliances?: {
                red?: components["schemas"]["Match_alliance"];
                blue?: components["schemas"]["Match_alliance"];
            };
            /**
             * @description The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
             * @enum {string}
             */
            winning_alliance?: "red" | "blue" | "";
            /** @description Event key of the event the match was played at. */
            event_key: string;
            /**
             * Format: int64
             * @description UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.
             */
            time?: number;
            /**
             * Format: int64
             * @description UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.
             */
            actual_time?: number;
            /**
             * Format: int64
             * @description UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.
             */
            predicted_time?: number;
            /**
             * Format: int64
             * @description UNIX timestamp (seconds since 1-Jan-1970 00:00:00) when the match result was posted.
             */
            post_result_time?: number;
            /** @description Score breakdown for auto, teleop, etc. points. Varies from year to year. May be null. */
            score_breakdown?: Record<string, never>;
            /** @description Array of video objects associated with this match. */
            videos?: {
                /** @description Can be one of 'youtube' or 'tba' */
                type?: string;
                /** @description Unique key representing this video */
                key?: string;
            }[];
        };
        Match_alliance: {
            /** @description Score for this alliance. Will be null or -1 for an unplayed match. */
            score: number;
            team_keys: string[];
            /** @description TBA team keys (eg `frc254`) of any teams playing as a surrogate. */
            surrogate_team_keys?: string[];
            /** @description TBA team keys (eg `frc254`) of any disqualified teams. */
            dq_team_keys?: string[];
        };
        Zebra: {
            /** @description TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set. */
            key: string;
            /** @description A list of relative timestamps for each data point. Each timestamp will correspond to the X and Y value at the same index in a team xs and ys arrays. `times`, all teams `xs` and all teams `ys` are guarenteed to be the same length. */
            times: number[];
            alliances: {
                /** @description Zebra MotionWorks data for teams on the red alliance */
                red?: components["schemas"]["Zebra_team"][];
                /** @description Zebra data for teams on the blue alliance */
                blue?: components["schemas"]["Zebra_team"][];
            };
        };
        Zebra_team: {
            /**
             * @description The TBA team key for the Zebra MotionWorks data.
             * @example frc7332
             */
            team_key: string;
            /** @description A list containing doubles and nulls representing a teams X position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp. */
            xs: number[];
            /** @description A list containing doubles and nulls representing a teams Y position in feet at the corresponding timestamp. A null value represents no tracking data for a given timestamp. */
            ys: number[];
        };
        /** @description See the 2015 FMS API documentation for a description of each value */
        Match_Score_Breakdown_2015: {
            blue?: components["schemas"]["Match_Score_Breakdown_2015_Alliance"];
            red?: components["schemas"]["Match_Score_Breakdown_2015_Alliance"];
            /** @enum {string} */
            coopertition?: "None" | "Unknown" | "Stack";
            coopertition_points?: number;
        };
        Match_Score_Breakdown_2015_Alliance: {
            auto_points?: number;
            teleop_points?: number;
            container_points?: number;
            tote_points?: number;
            litter_points?: number;
            foul_points?: number;
            adjust_points?: number;
            total_points?: number;
            foul_count?: number;
            tote_count_far?: number;
            tote_count_near?: number;
            tote_set?: boolean;
            tote_stack?: boolean;
            container_count_level1?: number;
            container_count_level2?: number;
            container_count_level3?: number;
            container_count_level4?: number;
            container_count_level5?: number;
            container_count_level6?: number;
            container_set?: boolean;
            litter_count_container?: number;
            litter_count_landfill?: number;
            litter_count_unprocessed?: number;
            robot_set?: boolean;
        };
        /** @description See the 2016 FMS API documentation for a description of each value. */
        Match_Score_Breakdown_2016: {
            blue?: components["schemas"]["Match_Score_Breakdown_2016_Alliance"];
            red?: components["schemas"]["Match_Score_Breakdown_2016_Alliance"];
        };
        Match_Score_Breakdown_2016_Alliance: {
            autoPoints?: number;
            teleopPoints?: number;
            breachPoints?: number;
            foulPoints?: number;
            capturePoints?: number;
            adjustPoints?: number;
            totalPoints?: number;
            /** @enum {string} */
            robot1Auto?: "Crossed" | "Reached" | "None";
            /** @enum {string} */
            robot2Auto?: "Crossed" | "Reached" | "None";
            /** @enum {string} */
            robot3Auto?: "Crossed" | "Reached" | "None";
            autoReachPoints?: number;
            autoCrossingPoints?: number;
            autoBouldersLow?: number;
            autoBouldersHigh?: number;
            autoBoulderPoints?: number;
            teleopCrossingPoints?: number;
            teleopBouldersLow?: number;
            teleopBouldersHigh?: number;
            teleopBoulderPoints?: number;
            teleopDefensesBreached?: boolean;
            teleopChallengePoints?: number;
            teleopScalePoints?: number;
            teleopTowerCaptured?: number;
            towerFaceA?: string;
            towerFaceB?: string;
            towerFaceC?: string;
            towerEndStrength?: number;
            techFoulCount?: number;
            foulCount?: number;
            position2?: string;
            position3?: string;
            position4?: string;
            position5?: string;
            position1crossings?: number;
            position2crossings?: number;
            position3crossings?: number;
            position4crossings?: number;
            position5crossings?: number;
        };
        /** @description See the 2017 FMS API documentation for a description of each value. */
        Match_Score_Breakdown_2017: {
            blue?: components["schemas"]["Match_Score_Breakdown_2017_Alliance"];
            red?: components["schemas"]["Match_Score_Breakdown_2017_Alliance"];
        };
        Match_Score_Breakdown_2017_Alliance: {
            autoPoints?: number;
            teleopPoints?: number;
            foulPoints?: number;
            adjustPoints?: number;
            totalPoints?: number;
            /** @enum {string} */
            robot1Auto?: "Unknown" | "Mobility" | "None";
            /** @enum {string} */
            robot2Auto?: "Unknown" | "Mobility" | "None";
            /** @enum {string} */
            robot3Auto?: "Unknown" | "Mobility" | "None";
            rotor1Auto?: boolean;
            rotor2Auto?: boolean;
            autoFuelLow?: number;
            autoFuelHigh?: number;
            autoMobilityPoints?: number;
            autoRotorPoints?: number;
            autoFuelPoints?: number;
            teleopFuelPoints?: number;
            teleopFuelLow?: number;
            teleopFuelHigh?: number;
            teleopRotorPoints?: number;
            kPaRankingPointAchieved?: boolean;
            teleopTakeoffPoints?: number;
            kPaBonusPoints?: number;
            rotorBonusPoints?: number;
            rotor1Engaged?: boolean;
            rotor2Engaged?: boolean;
            rotor3Engaged?: boolean;
            rotor4Engaged?: boolean;
            rotorRankingPointAchieved?: boolean;
            techFoulCount?: number;
            foulCount?: number;
            touchpadNear?: string;
            touchpadMiddle?: string;
            touchpadFar?: string;
        };
        /** @description See the 2018 FMS API documentation for a description of each value. https://frcevents2.docs.apiary.io/#/reference/match-results/score-details */
        Match_Score_Breakdown_2018: {
            blue?: components["schemas"]["Match_Score_Breakdown_2018_Alliance"];
            red?: components["schemas"]["Match_Score_Breakdown_2018_Alliance"];
        };
        Match_Score_Breakdown_2018_Alliance: {
            adjustPoints?: number;
            autoOwnershipPoints?: number;
            autoPoints?: number;
            autoQuestRankingPoint?: boolean;
            autoRobot1?: string;
            autoRobot2?: string;
            autoRobot3?: string;
            autoRunPoints?: number;
            autoScaleOwnershipSec?: number;
            autoSwitchAtZero?: boolean;
            autoSwitchOwnershipSec?: number;
            endgamePoints?: number;
            endgameRobot1?: string;
            endgameRobot2?: string;
            endgameRobot3?: string;
            faceTheBossRankingPoint?: boolean;
            foulCount?: number;
            foulPoints?: number;
            rp?: number;
            techFoulCount?: number;
            teleopOwnershipPoints?: number;
            teleopPoints?: number;
            teleopScaleBoostSec?: number;
            teleopScaleForceSec?: number;
            teleopScaleOwnershipSec?: number;
            teleopSwitchBoostSec?: number;
            teleopSwitchForceSec?: number;
            teleopSwitchOwnershipSec?: number;
            totalPoints?: number;
            vaultBoostPlayed?: number;
            vaultBoostTotal?: number;
            vaultForcePlayed?: number;
            vaultForceTotal?: number;
            vaultLevitatePlayed?: number;
            vaultLevitateTotal?: number;
            vaultPoints?: number;
            /** @description Unofficial TBA-computed value of the FMS provided GameData given to the alliance teams at the start of the match. 3 Character String containing `L` and `R` only. The first character represents the near switch, the 2nd the scale, and the 3rd the far, opposing, switch from the alliance's perspective. An `L` in a position indicates the platform on the left will be lit for the alliance while an `R` will indicate the right platform will be lit for the alliance. See also [WPI Screen Steps](https://wpilib.screenstepslive.com/s/currentCS/m/getting_started/l/826278-2018-game-data-details). */
            tba_gameData?: string;
        };
        /**
         * @description Timeseries data for the 2018 game *FIRST* POWER UP.
         * *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
         * *WARNING:* This model is currently under active development and may change at any time, including in breaking ways.
         */
        Match_Timeseries_2018: {
            /** @description TBA event key with the format yyyy[EVENT_CODE], where yyyy is the year, and EVENT_CODE is the event code of the event. */
            event_key?: string;
            /** @description Match ID consisting of the level, match number, and set number, eg `qm45` or `f1m1`. */
            match_id?: string;
            /** @description Current mode of play, can be `pre_match`, `auto`, `telop`, or `post_match`. */
            mode?: string;
            play?: number;
            /** @description Amount of time remaining in the match, only valid during `auto` and `teleop` modes. */
            time_remaining?: number;
            /** @description 1 if the blue alliance is credited with the AUTO QUEST, 0 if not. */
            blue_auto_quest?: number;
            /** @description Number of POWER CUBES in the BOOST section of the blue alliance VAULT. */
            blue_boost_count?: number;
            /** @description Returns 1 if the blue alliance BOOST was played, or 0 if not played. */
            blue_boost_played?: number;
            /** @description Name of the current blue alliance POWER UP being played, or `null`. */
            blue_current_powerup?: string;
            /** @description 1 if the blue alliance is credited with FACING THE BOSS, 0 if not. */
            blue_face_the_boss?: number;
            /** @description Number of POWER CUBES in the FORCE section of the blue alliance VAULT. */
            blue_force_count?: number;
            /** @description Returns 1 if the blue alliance FORCE was played, or 0 if not played. */
            blue_force_played?: number;
            /** @description Number of POWER CUBES in the LEVITATE section of the blue alliance VAULT. */
            blue_levitate_count?: number;
            /** @description Returns 1 if the blue alliance LEVITATE was played, or 0 if not played. */
            blue_levitate_played?: number;
            /** @description Number of seconds remaining in the blue alliance POWER UP time, or 0 if none is active. */
            blue_powerup_time_remaining?: string;
            /** @description 1 if the blue alliance owns the SCALE, 0 if not. */
            blue_scale_owned?: number;
            /** @description Current score for the blue alliance. */
            blue_score?: number;
            /** @description 1 if the blue alliance owns their SWITCH, 0 if not. */
            blue_switch_owned?: number;
            /** @description 1 if the red alliance is credited with the AUTO QUEST, 0 if not. */
            red_auto_quest?: number;
            /** @description Number of POWER CUBES in the BOOST section of the red alliance VAULT. */
            red_boost_count?: number;
            /** @description Returns 1 if the red alliance BOOST was played, or 0 if not played. */
            red_boost_played?: number;
            /** @description Name of the current red alliance POWER UP being played, or `null`. */
            red_current_powerup?: string;
            /** @description 1 if the red alliance is credited with FACING THE BOSS, 0 if not. */
            red_face_the_boss?: number;
            /** @description Number of POWER CUBES in the FORCE section of the red alliance VAULT. */
            red_force_count?: number;
            /** @description Returns 1 if the red alliance FORCE was played, or 0 if not played. */
            red_force_played?: number;
            /** @description Number of POWER CUBES in the LEVITATE section of the red alliance VAULT. */
            red_levitate_count?: number;
            /** @description Returns 1 if the red alliance LEVITATE was played, or 0 if not played. */
            red_levitate_played?: number;
            /** @description Number of seconds remaining in the red alliance POWER UP time, or 0 if none is active. */
            red_powerup_time_remaining?: string;
            /** @description 1 if the red alliance owns the SCALE, 0 if not. */
            red_scale_owned?: number;
            /** @description Current score for the red alliance. */
            red_score?: number;
            /** @description 1 if the red alliance owns their SWITCH, 0 if not. */
            red_switch_owned?: number;
        };
        /** @description See the 2019 FMS API documentation for a description of each value. https://frcevents2.docs.apiary.io/#/reference/match-results/score-details */
        Match_Score_Breakdown_2019: {
            blue?: components["schemas"]["Match_Score_Breakdown_2019_Alliance"];
            red?: components["schemas"]["Match_Score_Breakdown_2019_Alliance"];
        };
        Match_Score_Breakdown_2019_Alliance: {
            adjustPoints?: number;
            autoPoints?: number;
            bay1?: string;
            bay2?: string;
            bay3?: string;
            bay4?: string;
            bay5?: string;
            bay6?: string;
            bay7?: string;
            bay8?: string;
            cargoPoints?: number;
            completeRocketRankingPoint?: boolean;
            completedRocketFar?: boolean;
            completedRocketNear?: boolean;
            endgameRobot1?: string;
            endgameRobot2?: string;
            endgameRobot3?: string;
            foulCount?: number;
            foulPoints?: number;
            habClimbPoints?: number;
            habDockingRankingPoint?: boolean;
            habLineRobot1?: string;
            habLineRobot2?: string;
            habLineRobot3?: string;
            hatchPanelPoints?: number;
            lowLeftRocketFar?: string;
            lowLeftRocketNear?: string;
            lowRightRocketFar?: string;
            lowRightRocketNear?: string;
            midLeftRocketFar?: string;
            midLeftRocketNear?: string;
            midRightRocketFar?: string;
            midRightRocketNear?: string;
            preMatchBay1?: string;
            preMatchBay2?: string;
            preMatchBay3?: string;
            preMatchBay6?: string;
            preMatchBay7?: string;
            preMatchBay8?: string;
            preMatchLevelRobot1?: string;
            preMatchLevelRobot2?: string;
            preMatchLevelRobot3?: string;
            rp?: number;
            sandStormBonusPoints?: number;
            techFoulCount?: number;
            teleopPoints?: number;
            topLeftRocketFar?: string;
            topLeftRocketNear?: string;
            topRightRocketFar?: string;
            topRightRocketNear?: string;
            totalPoints?: number;
        };
        /** @description See the 2020 FMS API documentation for a description of each value. https://frcevents2.docs.apiary.io/#/reference/match-results/score-details */
        Match_Score_Breakdown_2020: {
            blue?: components["schemas"]["Match_Score_Breakdown_2020_Alliance"];
            red?: components["schemas"]["Match_Score_Breakdown_2020_Alliance"];
        };
        Match_Score_Breakdown_2020_Alliance: {
            initLineRobot1?: string;
            endgameRobot1?: string;
            initLineRobot2?: string;
            endgameRobot2?: string;
            initLineRobot3?: string;
            endgameRobot3?: string;
            autoCellsBottom?: number;
            autoCellsOuter?: number;
            autoCellsInner?: number;
            teleopCellsBottom?: number;
            teleopCellsOuter?: number;
            teleopCellsInner?: number;
            stage1Activated?: boolean;
            stage2Activated?: boolean;
            stage3Activated?: boolean;
            stage3TargetColor?: string;
            endgameRungIsLevel?: string;
            autoInitLinePoints?: number;
            autoCellPoints?: number;
            autoPoints?: number;
            teleopCellPoints?: number;
            controlPanelPoints?: number;
            endgamePoints?: number;
            teleopPoints?: number;
            shieldOperationalRankingPoint?: boolean;
            shieldEnergizedRankingPoint?: boolean;
            /** @description Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul. */
            tba_shieldEnergizedRankingPointFromFoul?: boolean;
            /** @description Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match. */
            tba_numRobotsHanging?: number;
            foulCount?: number;
            techFoulCount?: number;
            adjustPoints?: number;
            foulPoints?: number;
            rp?: number;
            totalPoints?: number;
        };
        /** @description See the 2022 FMS API documentation for a description of each value. https://frc-api-docs.firstinspires.org */
        Match_Score_Breakdown_2022: {
            blue?: components["schemas"]["Match_Score_Breakdown_2022_Alliance"];
            red?: components["schemas"]["Match_Score_Breakdown_2022_Alliance"];
        };
        Match_Score_Breakdown_2022_Alliance: {
            /** @enum {string} */
            taxiRobot1?: "Yes" | "No";
            /** @enum {string} */
            endgameRobot1?: "Traversal" | "High" | "Mid" | "Low" | "None";
            /** @enum {string} */
            taxiRobot2?: "Yes" | "No";
            /** @enum {string} */
            endgameRobot2?: "Traversal" | "High" | "Mid" | "Low" | "None";
            /** @enum {string} */
            taxiRobot3?: "Yes" | "No";
            /** @enum {string} */
            endgameRobot3?: "Traversal" | "High" | "Mid" | "Low" | "None";
            autoCargoLowerNear?: number;
            autoCargoLowerFar?: number;
            autoCargoLowerBlue?: number;
            autoCargoLowerRed?: number;
            autoCargoUpperNear?: number;
            autoCargoUpperFar?: number;
            autoCargoUpperBlue?: number;
            autoCargoUpperRed?: number;
            autoCargoTotal?: number;
            teleopCargoLowerNear?: number;
            teleopCargoLowerFar?: number;
            teleopCargoLowerBlue?: number;
            teleopCargoLowerRed?: number;
            teleopCargoUpperNear?: number;
            teleopCargoUpperFar?: number;
            teleopCargoUpperBlue?: number;
            teleopCargoUpperRed?: number;
            teleopCargoTotal?: number;
            matchCargoTotal?: number;
            autoTaxiPoints?: number;
            autoCargoPoints?: number;
            autoPoints?: number;
            quintetAchieved?: boolean;
            teleopCargoPoints?: number;
            endgamePoints?: number;
            teleopPoints?: number;
            cargoBonusRankingPoint?: boolean;
            hangarBonusRankingPoint?: boolean;
            foulCount?: number;
            techFoulCount?: number;
            adjustPoints?: number;
            foulPoints?: number;
            rp?: number;
            totalPoints?: number;
        };
        /** @description See the 2023 FMS API documentation for a description of each value. https://frc-api-docs.firstinspires.org */
        Match_Score_Breakdown_2023: {
            blue?: components["schemas"]["Match_Score_Breakdown_2023_Alliance"];
            red?: components["schemas"]["Match_Score_Breakdown_2023_Alliance"];
        };
        Match_Score_Breakdown_2023_Alliance: {
            activationBonusAchieved?: boolean;
            adjustPoints?: number;
            /** @enum {string} */
            autoBridgeState?: "NotLevel" | "Level";
            autoChargeStationPoints?: number;
            /** @enum {string} */
            autoChargeStationRobot1?: "None" | "Docked";
            /** @enum {string} */
            autoChargeStationRobot2?: "None" | "Docked";
            /** @enum {string} */
            autoChargeStationRobot3?: "None" | "Docked";
            autoDocked?: boolean;
            autoCommunity?: {
                B?: ("None" | "Cone" | "Cube")[];
                M?: ("None" | "Cone" | "Cube")[];
                T?: ("None" | "Cone" | "Cube")[];
            };
            autoGamePieceCount?: number;
            autoGamePiecePoints?: number;
            autoMobilityPoints?: number;
            /** @enum {string} */
            mobilityRobot1?: "Yes" | "No";
            /** @enum {string} */
            mobilityRobot2?: "Yes" | "No";
            /** @enum {string} */
            mobilityRobot3?: "Yes" | "No";
            autoPoints?: number;
            coopGamePieceCount?: number;
            coopertitionCriteriaMet?: boolean;
            /** @enum {string} */
            endGameBridgeState?: "NotLevel" | "Level";
            endGameChargeStationPoints?: number;
            /** @enum {string} */
            endGameChargeStationRobot1?: "None" | "Docked";
            /** @enum {string} */
            endGameChargeStationRobot2?: "None" | "Docked";
            /** @enum {string} */
            endGameChargeStationRobot3?: "None" | "Docked";
            endGameParkPoints?: number;
            extraGamePieceCount?: number;
            foulCount?: number;
            foulPoints?: number;
            techFoulCount?: number;
            linkPoints?: number;
            links?: ({
                nodes?: ("None" | "Cone" | "Cube")[];
                /** @enum {string} */
                row?: "Bottom" | "Mid" | "Top";
            })[];
            sustainabilityBonusAchieved?: boolean;
            teleopCommunity?: {
                B?: ("None" | "Cone" | "Cube")[];
                M?: ("None" | "Cone" | "Cube")[];
                T?: ("None" | "Cone" | "Cube")[];
            };
            teleopGamePieceCount?: number;
            teleopGamePiecePoints?: number;
            totalChargeStationPoints?: number;
            teleopPoints?: number;
            rp?: number;
            totalPoints?: number;
        };
        /** @description The `Media` object contains a reference for most any media associated with a team or event on TBA. */
        Media: {
            /**
             * @description String type of the media element.
             * @enum {string}
             */
            type: "youtube" | "cdphotothread" | "imgur" | "facebook-profile" | "youtube-channel" | "twitter-profile" | "github-profile" | "instagram-profile" | "periscope-profile" | "gitlab-profile" | "grabcad" | "instagram-image" | "external-link" | "avatar";
            /** @description The key used to identify this media on the media site. */
            foreign_key: string;
            /** @description If required, a JSON dict of additional media information. */
            details?: Record<string, never>;
            /** @description True if the media is of high quality. */
            preferred?: boolean;
            /** @description Direct URL to the media. */
            direct_url?: string;
            /** @description The URL that leads to the full web page for the media, if one exists. */
            view_url?: string;
        };
        Elimination_Alliance: {
            /** @description Alliance name, may be null. */
            name?: string;
            /** @description Backup team called in, may be null. */
            backup?: {
                /** @description Team key that was called in as the backup. */
                in?: string;
                /** @description Team key that was replaced by the backup team. */
                out?: string;
            };
            /** @description List of teams that declined the alliance. */
            declines?: string[];
            /** @description List of team keys picked for the alliance. First pick is captain. */
            picks: string[];
            status?: {
                /** Format: double */
                playoff_average?: number;
                level?: string;
                record?: components["schemas"]["WLT_Record"];
                current_level_record?: components["schemas"]["WLT_Record"];
                status?: string;
            };
        };
        Award: {
            /** @description The name of the award as provided by FIRST. May vary for the same award type. */
            name: string;
            /** @description Type of award given. See https://github.com/the-blue-alliance/the-blue-alliance/blob/master/consts/award_type.py#L6 */
            award_type: number;
            /** @description The event_key of the event the award was won at. */
            event_key: string;
            /** @description A list of recipients of the award at the event. May have either a team_key or an awardee, both, or neither (in the case the award wasn't awarded at the event). */
            recipient_list: components["schemas"]["Award_Recipient"][];
            /** @description The year this award was won. */
            year: number;
        };
        /** @description An `Award_Recipient` object represents the team and/or person who received an award at an event. */
        Award_Recipient: {
            /** @description The TBA team key for the team that was given the award. May be null. */
            team_key?: string;
            /** @description The name of the individual given the award. May be null. */
            awardee?: string;
        };
        District_List: {
            /** @description The short identifier for the district. */
            abbreviation: string;
            /** @description The long name for the district. */
            display_name: string;
            /** @description Key for this district, e.g. `2016ne`. */
            key: string;
            /** @description Year this district participated. */
            year: number;
        };
        /** @description Rank of a team in a district. */
        District_Ranking: {
            /** @description TBA team key for the team. */
            team_key: string;
            /** @description Numerical rank of the team, 1 being top rank. */
            rank: number;
            /** @description Any points added to a team as a result of the rookie bonus. */
            rookie_bonus?: number;
            /** @description Total district points for the team. */
            point_total: number;
            /** @description List of events that contributed to the point total for the team. */
            event_points?: {
                /** @description `true` if this event is a District Championship event. */
                district_cmp: boolean;
                /** @description Total points awarded at this event. */
                total: number;
                /** @description Points awarded for alliance selection. */
                alliance_points: number;
                /** @description Points awarded for elimination match performance. */
                elim_points: number;
                /** @description Points awarded for event awards. */
                award_points: number;
                /** @description TBA Event key for this event. */
                event_key: string;
                /** @description Points awarded for qualification match performance. */
                qual_points: number;
            }[];
        };
        /** @description A Win-Loss-Tie record for a team, or an alliance. */
        WLT_Record: {
            /** @description Number of losses. */
            losses: number;
            /** @description Number of wins. */
            wins: number;
            /** @description Number of ties. */
            ties: number;
        };
        Webcast: {
            /**
             * @description Type of webcast, typically descriptive of the streaming provider.
             * @enum {string}
             */
            type: "youtube" | "twitch" | "ustream" | "iframe" | "html5" | "rtmp" | "livestream" | "direct_link" | "mms" | "justin" | "stemtv" | "dacast";
            /** @description Type specific channel information. May be the YouTube stream, or Twitch channel name. In the case of iframe types, contains HTML to embed the stream in an HTML iframe. */
            channel: string;
            /** @description The date for the webcast in `yyyy-mm-dd` format. May be null. */
            date?: string;
            /** @description File identification as may be required for some types. May be null. */
            file?: string;
        };
    };
    responses: {
        /** @description Authorization information is missing or invalid. */
        Unauthorized: {
            content: {
                "application/json": {
                    /** @description Authorization error description. */
                    Error: string;
                };
            };
        };
        /** @description Not Modified - Use Local Cached Value */
        NotModified: {
            content: never;
        };
    };
    parameters: {
        /** @description Competition Year (or Season). Must be 4 digits. */
        year: number;
        /** @description Media Tag which describes the Media. */
        media_tag: string;
        /** @description Value of the `ETag` header in the most recently cached response by the client. */
        "If-None-Match"?: string;
        /** @description Page number of results to return, zero-indexed */
        page_num: number;
        /** @description TBA Match Key, eg `2016nytr_qm1` */
        match_key: string;
        /** @description TBA District Key, eg `2016fim` */
        district_key: string;
        /** @description TBA Team Key, eg `frc254` */
        team_key: string;
        /** @description TBA Event Key, eg `2016nytr` */
        event_key: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

    /** @description Returns API status, and TBA status information. */
    getStatus: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["API_Status"];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of `Team` objects, paginated in groups of 500. */
    getTeams: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                page_num: components["parameters"]["page_num"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Team"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of short form `Team_Simple` objects, paginated in groups of 500. */
    getTeamsSimple: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                page_num: components["parameters"]["page_num"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Team_Simple"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.) */
    getTeamsKeys: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                page_num: components["parameters"]["page_num"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": string[];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of `Team` objects that competed in the given year, paginated in groups of 500. */
    getTeamsByYear: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                year: components["parameters"]["year"];
                page_num: components["parameters"]["page_num"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Team"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of short form `Team_Simple` objects that competed in the given year, paginated in groups of 500. */
    getTeamsByYearSimple: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                year: components["parameters"]["year"];
                page_num: components["parameters"]["page_num"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Team_Simple"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list Team Keys that competed in the given year, paginated in groups of 500. */
    getTeamsByYearKeys: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                year: components["parameters"]["year"];
                page_num: components["parameters"]["page_num"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": string[];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a `Team` object for the team referenced by the given key. */
    getTeam: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a `Team_Simple` object for the team referenced by the given key. */
    getTeamSimple: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Team_Simple"];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of years in which the team participated in at least one competition. */
    getTeamYearsParticipated: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": number[];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district. */
    getTeamDistricts: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["District_List"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot. */
    getTeamRobots: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Team_Robot"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of all events this team has competed at. */
    getTeamEvents: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Event"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a short-form list of all events this team has competed at. */
    getTeamEventsSimple: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Event_Simple"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of the event keys for all events this team has competed at. */
    getTeamEventsKeys: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": string[];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of events this team has competed at in the given year. */
    getTeamEventsByYear: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                year: components["parameters"]["year"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Event"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a short-form list of events this team has competed at in the given year. */
    getTeamEventsByYearSimple: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                year: components["parameters"]["year"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Event_Simple"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of the event keys for events this team has competed at in the given year. */
    getTeamEventsByYearKeys: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                year: components["parameters"]["year"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": string[];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a key-value list of the event statuses for events this team has competed at in the given year. */
    getTeamEventsStatusesByYear: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                year: components["parameters"]["year"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": {
                        [key: string]: components["schemas"]["Team_Event_Status"];
                    };
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of matches for the given team and event. */
    getTeamEventMatches: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Match"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a short-form list of matches for the given team and event. */
    getTeamEventMatchesSimple: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Match"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of match keys for matches for the given team and event. */
    getTeamEventMatchesKeys: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": string[];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of awards the given team won at the given event. */
    getTeamEventAwards: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Award"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets the competition rank and status of the team at the given event. */
    getTeamEventStatus: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Team_Event_Status"];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of awards the given team has won. */
    getTeamAwards: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Award"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of awards the given team has won in a given year. */
    getTeamAwardsByYear: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                year: components["parameters"]["year"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Award"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of matches for the given team and year. */
    getTeamMatchesByYear: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                year: components["parameters"]["year"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Match"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a short-form list of matches for the given team and year. */
    getTeamMatchesByYearSimple: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                year: components["parameters"]["year"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Match_Simple"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of match keys for matches for the given team and year. */
    getTeamMatchesByYearKeys: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                year: components["parameters"]["year"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": string[];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of Media (videos / pictures) for the given team and year. */
    getTeamMediaByYear: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                year: components["parameters"]["year"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Media"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of Media (videos / pictures) for the given team and tag. */
    getTeamMediaByTag: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                media_tag: components["parameters"]["media_tag"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Media"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of Media (videos / pictures) for the given team, tag and year. */
    getTeamMediaByTagYear: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
                media_tag: components["parameters"]["media_tag"];
                year: components["parameters"]["year"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Media"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of Media (social media) for the given team. */
    getTeamSocialMedia: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                team_key: components["parameters"]["team_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Media"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of events in the given year. */
    getEventsByYear: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                year: components["parameters"]["year"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Event"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a short-form list of events in the given year. */
    getEventsByYearSimple: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                year: components["parameters"]["year"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Event_Simple"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of event keys in the given year. */
    getEventsByYearKeys: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                year: components["parameters"]["year"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": string[];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets an Event. */
    getEvent: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a short-form Event. */
    getEventSimple: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Event_Simple"];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of Elimination Alliances for the given Event. */
    getEventAlliances: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Elimination_Alliance"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a set of Event-specific insights for the given Event. */
    getEventInsights: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Event_Insights"];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event. */
    getEventOPRs: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Event_OPRs"];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time. */
    getEventPredictions: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Event_Predictions"];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of team rankings for the Event. */
    getEventRankings: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Event_Ranking"];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of team rankings for the Event. */
    getEventDistrictPoints: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Event_District_Points"];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of `Team` objects that competed in the given event. */
    getEventTeams: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Team"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a short-form list of `Team` objects that competed in the given event. */
    getEventTeamsSimple: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Team_Simple"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of `Team` keys that competed in the given event. */
    getEventTeamsKeys: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": string[];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a key-value list of the event statuses for teams competing at the given event. */
    getEventTeamsStatuses: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": {
                        [key: string]: components["schemas"]["Team_Event_Status"];
                    };
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of matches for the given event. */
    getEventMatches: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Match"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a short-form list of matches for the given event. */
    getEventMatchesSimple: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Match_Simple"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of match keys for the given event. */
    getEventMatchesKeys: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": string[];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /**
     * @description Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data.
     * *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
     * *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
     */
    getEventMatchTimeseries: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": string[];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of awards from the given event. */
    getEventAwards: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                event_key: components["parameters"]["event_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Award"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a `Match` object for the given match key. */
    getMatch: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                match_key: components["parameters"]["match_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Match"];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a short-form `Match` object for the given match key. */
    getMatchSimple: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                match_key: components["parameters"]["match_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Match_Simple"];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /**
     * @description Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available.
     * *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up.
     * *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.
     */
    getMatchTimeseries: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                match_key: components["parameters"]["match_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": Record<string, never>[];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets Zebra MotionWorks data for a Match for the given match key. */
    getMatchZebra: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                match_key: components["parameters"]["match_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Zebra"];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of districts and their corresponding district key, for the given year. */
    getDistrictsByYear: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                year: components["parameters"]["year"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["District_List"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of events in the given district. */
    getDistrictEvents: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                district_key: components["parameters"]["district_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Event"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a short-form list of events in the given district. */
    getDistrictEventsSimple: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                /** @description TBA District Key, eg `2016fim` */
                district_key: string;
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Event_Simple"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of event keys for events in the given district. */
    getDistrictEventsKeys: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                district_key: components["parameters"]["district_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": string[];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of `Team` objects that competed in events in the given district. */
    getDistrictTeams: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                district_key: components["parameters"]["district_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Team"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a short-form list of `Team` objects that competed in events in the given district. */
    getDistrictTeamsSimple: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                district_key: components["parameters"]["district_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["Team_Simple"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of `Team` objects that competed in events in the given district. */
    getDistrictTeamsKeys: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                district_key: components["parameters"]["district_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": string[];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
    /** @description Gets a list of team district rankings for the given district. */
    getDistrictRankings: {
        parameters: {
            header?: {
                "If-None-Match"?: components["parameters"]["If-None-Match"];
            };
            path: {
                district_key: components["parameters"]["district_key"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description The `Cache-Control` header, in particular the `max-age` value, contains the number of seconds the result should be considered valid for. During this time subsequent calls should return from the local cache directly. */
                    "Cache-Control"?: string;
                    /** @description Specifies the version of the most recent response. Used by clients in the `If-None-Match` request header. */
                    ETag?: string;
                };
                content: {
                    "application/json": components["schemas"]["District_Ranking"][];
                };
            };
            304: components["responses"]["NotModified"];
            401: components["responses"]["Unauthorized"];
        };
    };
}
